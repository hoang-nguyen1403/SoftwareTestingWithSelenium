# Generated by Selenium IDE
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By


class BaseConnection():
    def __init__(self, data_path):
        self.first_run = True
        self.read_data(data_path)

    def read_data(self, data_path):
        self.data = None
        try:
            with open(data_path, encoding='UTF-8') as f:
                self.data = json.load(f)
        except Exception as e:
            print(e)

    def setup_method(self, method):
        options = webdriver.ChromeOptions()
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        self.driver = webdriver.Chrome(options=options)
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()


class TestRunner():
    @staticmethod
    def test(test_connection: BaseConnection, test_name: str):
        #### Find test func, it starts with "test..."
        test_func = None
        all_attributes = dir(test_connection)
        # Filter and run methods starting with "test"
        for attr in all_attributes:
            if attr.startswith("test") and callable(getattr(test_connection, attr)):
                # Call the method
                test_func = getattr(test_connection, attr)
                break
        #### Save result
        test_dict = test_connection.data
        result = []
        for test in test_dict.values():
            result.append(test_func(test))
        fail_test_name = []
        for i in range(0, len(result)):
            if not result[i]:
                fail_test_name.append(list(test_dict.keys())[i])

        fail_test_name_str = 'FAILED:\n\t' + '\n\t'.join(name for name in fail_test_name) if len(
            fail_test_name) != 0 else 'Fail testcase: None'
        print(f"""
        \n- Test {test_name} (Level 1) --\nPASSED: {result.count(True)}/{len(result)}\n{fail_test_name_str}\n
        """)

    @staticmethod
    def run(test_suite, test_name: str):
        test_suite.setup_method(None)
        result = TestRunner.test(test_suite, test_name)
        test_suite.teardown_method(None)
        return result


class TestChangeTeacherPassword(BaseConnection):
    def test_change_user_name_password(self, test_data):
        try:
            updated_password = test_data["password"]
            default_user = "teacher"
            default_password = "moodle"
            self.driver.get("https://school.moodledemo.net/login/index.php")
            self.driver.set_window_size(1934, 982)
            self.driver.find_element(By.ID, "username").send_keys(default_user)
            self.driver.find_element(By.ID, "password").send_keys(default_password)
            self.driver.find_element(By.ID, "loginbtn").click()
            self.driver.find_element(By.ID, "user-menu-toggle").click()
            self.driver.find_element(By.LINK_TEXT, "Preferences").click()
            self.driver.find_element(By.LINK_TEXT, "Change password").click()

            self.driver.find_element(By.ID, "id_password").send_keys(default_password)
            self.driver.find_element(By.ID, "id_newpassword1").send_keys(updated_password)
            self.driver.find_element(By.ID, "id_newpassword2").send_keys(updated_password)
            self.driver.find_element(By.ID, "id_submitbutton").click()
            time.sleep(1)
            ok = self.driver.find_element(By.ID, "notice").text ==  'Password has been changed'

            if ok is True:
                # reset password and log out in order to start new test
                self.driver.find_element(By.ID, "user-menu-toggle").click()
                self.driver.find_element(By.LINK_TEXT, "Preferences").click()
                self.driver.find_element(By.LINK_TEXT, "Change password").click()

                self.driver.find_element(By.ID, "id_password").send_keys(updated_password)
                self.driver.find_element(By.ID, "id_newpassword1").send_keys(default_password)
                self.driver.find_element(By.ID, "id_newpassword2").send_keys(default_password)
                self.driver.find_element(By.ID, "id_submitbutton").click()
                self.driver.find_element(By.ID, "user-menu-toggle").click()
                self.driver.find_element(By.LINK_TEXT, "Log out").click()
                return True
            else:
                self.driver.find_element(By.ID, "user-menu-toggle").click()
                self.driver.find_element(By.LINK_TEXT, "Log out").click()
            return False
        except Exception as err:
            return False

if __name__ == '__main__':

    responsiveTestSuite = TestChangeTeacherPassword('./input/input_responsive.json')
    TestRunner.run(responsiveTestSuite, "TestChangeTeacherPassword")
